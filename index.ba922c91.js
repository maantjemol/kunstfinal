window.crypto.getRandomValues.bind(crypto);const t=async t=>{let e;const i=t.clone();try{({message:e}=await t.json())}catch{e=`Response not OK (${t.status})`}throw((t,e={})=>Object.assign(new Error,{...e,message:t}))(e,{name:"FetchError",response:i})},e=(t,e)=>{const i=/^[0-9a-z_]+$/iu,n=/^[0-9a-f]{24}$/iu,o=/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/iu;switch(t){case"api-key":return o.test(e);case"box":{const t=20,n=64;return e.length>=t&&e.length<=n&&i.test(e)}case"collection":{const t=1,n=20;return e.length>=t&&e.length>=n&&i.test(e)}case"record":return n.test(e);default:throw new TypeError('Invalid parameter "type": it must be one of "api-key" | "box" | "collection" | "record"')}},i=t=>t.ok;const n=new class{constructor(n,{apiKey:o,origin:a="https://jsonbox.io"}={}){if(this.getUrl=({collection:t,filter:i,id:n,limit:o,skip:a,sort:s}={})=>{if("string"==typeof n&&"string"==typeof t)throw new TypeError('Cannot use both properties "id" and "collection"');const r=new URL(this.origin);if(r.pathname=`/${this.id}`,"string"==typeof n){if(!e("record",n))throw new TypeError("Invalid record ID");r.pathname+=`/${n}`}else if("string"==typeof t){if(!e("collection",t))throw new TypeError('Invalid collection name: A collection name must consist of at least 1 and not more than 20 characters including alphanumeric and "_"');r.pathname+=`/${t}`}const c={limit:o,q:i,skip:a,sort:s};return r.search=[...Object.entries(c)].filter((([,t])=>void 0!==t)).map((([t,e])=>`${t}=${encodeURIComponent(e)}`)).join("&"),r.href},this.create=async(e,n)=>{const o={body:JSON.stringify(e),headers:{"Content-Type":"application/json"},method:"POST"};void 0!==this.apiKey&&(o.headers["x-api-key"]=this.apiKey);const a=await fetch(this.getUrl({collection:n}),o);return i(a)?a.json():t(a)},this.delete=async e=>{const n={method:"DELETE"};if(void 0!==this.apiKey&&(n.headers={"x-api-key":this.apiKey}),Array.isArray(e)){const o=e,a=o.map((async e=>{const o=await fetch(this.getUrl({id:e}),n);return i(o)?o.json():t(o)}));return(await Promise.allSettled(a)).map((({status:t},e)=>({id:o[e],success:"fulfilled"===t})))}const o={};"string"==typeof e?o.id=e:"object"==typeof e&&(o.filter=e.filter);const a=await fetch(this.getUrl(o),n);return i(a)?a.json():t(a)},this.read=async e=>{const n={method:"GET"};let o;void 0!==this.apiKey&&(n.headers={"x-api-key":this.apiKey}),"string"==typeof e?o={id:e}:"object"==typeof e&&(o=e);const a=await fetch(this.getUrl(o),n);return i(a)?a.json():t(a)},this.remove=this.delete,this.meta=async()=>{const e={method:"GET"};void 0!==this.apiKey&&(e.headers={"x-api-key":this.apiKey});const n=await fetch(`${this.origin}/_meta/${this.id}`,e);return i(n)?n.json():t(n)},this.update=async(e,n)=>{const o={body:JSON.stringify(n),headers:{"Content-Type":"application/json"},method:"PUT"};void 0!==this.apiKey&&(o.headers["x-api-key"]=this.apiKey);const a=await fetch(this.getUrl({id:e}),o);return i(a)?a.json():t(a)},!e("box",n))throw new TypeError('Invalid parmater "id": Box ID must consist of at least 20 and not more than 64 characters including alphanumeric and "_"');if("string"==typeof o&&!e("api-key",o))throw new TypeError('Invalid parameter "apiKey": API key must be a valid UUID');this.apiKey=o,this.id=n,this.origin=a}}("box_2eb7b42fe95dbf8a1202",{origin:"http://server.maantjemol.com:3123"}),{create:o,meta:a,read:s,remove:r,update:c}=n;async function h(){return await s()}async function p(t){let e={compliment:t};return response=await o(e),response}window.submitComp=async function(){let t=document.getElementById("compInput").value;if(filter(t)||""==t)return alert("bad words!"),!1;sendAnimation();let e=await h();await p(t);let i=e[0];document.getElementById("compliment").innerHTML=i.compliment};
//# sourceMappingURL=index.ba922c91.js.map
